name: Release Drafter

on:
  workflow_dispatch:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize, edited]

  pull_request_target:
    types: [opened, reopened, synchronize, edited]

jobs:
  safety-gate:
    runs-on: ubuntu-latest
    outputs:
      allowed: ${{ steps.auth.outputs.allowed }}

    steps:
      - uses: actions/checkout@v4
      - name: Collect inputs
        id: vars
        run: |
          echo "pr_author=${{ github.actor }}" >> "$GITHUB_OUTPUT"
          echo "token=${{ secrets.GITHUB_TOKEN }}"                    >> "$GITHUB_OUTPUT"
          echo "whitelist=${{ vars.WHITE_LIST || '' }}"          >> "$GITHUB_OUTPUT"

          echo "whitelist : $whitelist"
          echo "pr_author : $pr_author"

      # ---------- 1) team check ----------
      - name: Is author in team?
        id: team
        run: |
          code=$(curl -s -o /dev/null -w '%{http_code}' \
            -H "Authorization: Bearer ${{ steps.vars.outputs.token }}" \
            "https://api.github.com/orgs/rancher-sandbox/teams/sbombastic-developers/memberships/${{ steps.vars.outputs.pr_author }}")
          [[ "$code" == "200" ]] && echo "in_team=true" >> "$GITHUB_OUTPUT" || echo "in_team=false" >> "$GITHUB_OUTPUT"

          echo "in_team : $in_team"
          echo "code : $code "

      # ---------- 2) whitelist check ----------
      - name: Is author in file whitelist?
        if: steps.team.outputs.in_team == 'false'
        id: wl
        run: |
          # Convert the comma-separated string into a Bash array
          IFS=',' read -ra ALLOWED <<< '${{ steps.vars.outputs.whitelist }}'

          echo "Author:  ${{ steps.vars.outputs.pr_author }}"
          echo "Allowed:  ${ALLOWED[*]}"

          authorised=false
          for u in "${ALLOWED[@]}"; do
            if [[ "$u" == "${{ steps.vars.outputs.pr_author }}" ]]; then
              authorised=true
              break
            fi
          done

          echo "authorised=$authorised" >> "$GITHUB_OUTPUT"
          if [[ "$authorised" == "false" ]]; then
            echo "::notice::${{ steps.vars.outputs.pr_author }} is not whitelisted - skipping protected steps"
            exit 0        # stop the job gracefully
          fi

      # ---------- final decision ----------
      - name: Decide
        id: auth
        run: |
          if [[ "${{ steps.team.outputs.in_team }}" == "true" || "${{ steps.wl.outputs.authorised }}" == "true" ]]; then
            echo "::notice::${{ steps.vars.outputs.pr_author }} authorised - continuing"
            echo "allowed=true" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::${{ steps.vars.outputs.pr_author }} not authorised - blocking protected steps"
            echo "allowed=false" >> "$GITHUB_OUTPUT"
          fi

  update_release_draft:
    needs: safety-gate
    if: needs.safety-gate.outputs.allowed == 'true'
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6.1.0
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
